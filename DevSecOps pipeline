pipeline {
    agent any

    tools {
        jdk "jdk17"
        maven "maven3"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/Petclinic.git'
            }
        }

        stage('Code Compile') {
            steps {
                sh "mvn clean compile"
            }
        }

        stage('Unit Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dependency-check-11'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withCredentials([string(credentialsId: 'new-sonar', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        /var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/Sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=petclinic \
                            -Dsonar.projectName=petclinic \
                            -Dsonar.host.url=http://74.235.201.41:9000/ \
                            -Dsonar.login=$SONAR_TOKEN \
                            -Dsonar.sources=src \
                            -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }

        stage('Build Code') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        stage('Deploy to tomcat') {
            steps {
                sh "sudo cp /var/lib/jenkins/workspace/pipeline/target/petclinic.war /opt/tomcat/webapps/"
            }
        }
        
    }
}
